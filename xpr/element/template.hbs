<!doctype html>
<html lang="en">
<script
  src="https://code.jquery.com/jquery-3.5.0.min.js"
  integrity="sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ="
  crossorigin="anonymous"></script>

<head>
    <title>Bundles 2.0 Demo Repo</title>
    <link rel="stylesheet" href="{{{WebRoot xpr.bundle}}}/css/pure-min.css">
    <link rel="stylesheet" href="{{{WebRoot xpr.bundle}}}/css/side-menu.css">
    <link rel="stylesheet" href="{{{WebRoot xpr.bundle}}}/css/devon-custom.css">
</head>
<body>
<div id="layout">
    <!-- Menu toggle -->
    <a href="#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon -->
        <span></span>
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="#">Bundles 2.0</a>
            <ul class="pure-menu-list">
                <li class="pure-menu-item"><a href="#entry-point" class="pure-menu-link">Entry Point</a></li>
                <li class="pure-menu-item"><a href="#inline-media" class="pure-menu-link">Inline Media</a></li>
                <li class="pure-menu-item"><a href="#xpr-context" class="pure-menu-link">XPR Context</a></li>
                <li class="pure-menu-item"><a href="#about-element" class="pure-menu-link">About Element</a></li>
                <li class="pure-menu-item"><a href="#attached-data" class="pure-menu-link">Attached Data</a></li>
                <li class="pure-menu-item"><a href="#context-passing" class="pure-menu-link">Context Passing</a></li>
                <li class="pure-menu-item"><a href="#element-options" class="pure-menu-link">Element Options</a></li>
                <li class="pure-menu-item"><a href="#ssjs-binding" class="pure-menu-link">SSJS - Element Binding</a></li>
                <li class="pure-menu-item"><a href="#ssjs-binding-ds" class="pure-menu-link">SSJS - Data Processing</a></li>
                <li class="pure-menu-item"><a href="#bundle-routes" class="pure-menu-link">Bundle Routes</a></li>
                <!-- <li class="pure-menu-item"><a href="#element-options" class="pure-menu-link">SSJS - Datasource Attached</a></li> -->
            </ul>
        </div>
    </div>

    <div id="main">
        <div class="header">
            <div>
            <a class="" target="_blank" href="https://expression.cloud"><img src="{{{WebRoot xpr.bundle}}}/img/xpr.png"></a>
            </div>
            <h1>Bundles 2.0 Demo Repo</h1>
            <div>
            <a class="gitlab_link" target="_blank" href="https://github.com/expressioncloud/bundles-demo"><img src="{{{WebRoot xpr.bundle}}}/img/GitHub_Logo.png"></a>
            </div>
            <p class="sagan-quote">"Imagination will often carry us to worlds that never were. But without it we go nowhere" - Carl Sagan</p>
        </div>

        <div class="content">
            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="entry-point" class="content-subhead">Entry Point</h2>

            <p>
            This page, like all pages in Expression, is rendered with an <code>Element</code>.  An Element is an HTML template for marking up data pulled from Datasources, used to render blocks of content. Elements are based on the Handlebars templating language. Elements can reference other Elements, allowing for modular markup construction
            </p>
            <p>
                The Element rendering this page <code>(template.hbs)</code> can be viewed in GitHub here: {{{XprElement bundlePath="git_link" options.path="xpr/element/template.hbs"}}}
            </p>
            <p>
                Each Element can optionally have a configuration file. The configuration for this Element can be viewed in github here: {{{XprElement bundlePath="git_link" options.path="xpr/element_config/template.json"}}}
            </p>
            <p>
                We happen to be using Elements to render those links: {{{XprElement bundlePath="git_link" options.path="xpr/element/git_link.hbs"}}}. The cost "per Element" without any additional API fetches on the general Expression is relatively small. 
            </p>
        
            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="inline-media" class="content-subhead">Inline Media</h2>
            <img src="{{{WebRoot xpr.bundle}}}/img/cool_room.jpeg"></img>
            <p>Bundles 2.0 can include media. This is great for custom widgets or assets which should be developer managed, rather than client managed. Any static media lives in the bundle's web directory: {{{XprElement bundlePath="git_link" options.path="xpr/web/"}}}</p>
            <p>
            {{=<% %>=}}
            This is how we include the CSS and JS for this bundle: <code>href="{{{WebRoot xpr.bundle}}}/css/devon-custom.css"</code>
            <%={{ }}=%>
            </p>

            <h2 id="xpr-context" class="content-subhead">XPR Context</h2>
            <p> Demonstrates using <code>XprJson</code> helper to dump the <code>xpr</code> variable</p>
            <p>
            {{=<% %>=}}
            <code>
            {{{XprJson xpr}}}
            </code>
            <%={{ }}=%>
            </p>
            <div class="demo-code">
            <code>
            {{XprJson xpr}}
            </code>
            </div>

            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="about-element" class="content-subhead">About Element</h2>
            {{=<% %>=}}
            <p> Demonstrates using <code>{{{XprElement}}}</code> to pull in an Element</p>
            <%={{ }}=%>
            <p>
                The code for this Element <code>(about.hbs)</code> can be viewed in github here: {{{XprElement bundlePath="git_link" options.path="xpr/element/details/about.hbs"}}}
            </p>
            {{{XprElement bundlePath="about"}}}

            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="attached-data" class="content-subhead">Attached Data</h2>
            <p>
                The Element rendering this page <code>(template.hbs)</code> can be viewed in github here: {{{XprElement bundlePath="git_link" options.path="xpr/element/template.hbs"}}}
            </p>
            <p>
                The configuration for this Element can be viewed in github here: {{{XprElement bundlePath="git_link" options.path="xpr/element_config/template.json"}}}
            </p>

            <p>An Element's configuration includes the datasources attached, and any options to configure those datasources. In the case of this <code>template</code> Element, we have a datasource attached which uses the <code>datasource/articles_by_section.json</code> datasource to populate the variable <code>PageArticles</code> for this Element.

            <h3>Example of Dynamic Article Data</h3>
            {{=<% %>=}}
            <code>
            {{#each PageArticles}}
                &ltli&gt {{Title}} &lt/li&gt
            {{/each}}
            </code>
            <%={{ }}=%>
            <ul>
            {{#each PageArticles}}
            <li>{{Title}}</li>
            {{/each}}
            </ul>

            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="context-passing" class="content-subhead">Context Passing</h2>
            <p>
                Elements can have data from the <code>root</code> or <code>parent</code> context passed into them to be rendered. Here we are going to loop over the same data as in the Attached Data context, but instead of rendering each article inline, pass the article to a sub Element for rendering. {{{XprElement bundlePath="git_link" options.path="xpr/element/details/article_details.hbs"}}}
            </p>
            <p>
            {{=<% %>=}}
            <code>
            {{#each PageArticles}}
                {{{XprElement bundlePath="details/article_details" context.Article=this}}}
            {{/each}}
            </code>
            <%={{ }}=%>
            </p>

            {{#each PageArticles}}
            {{{XprElement bundlePath="details/article_details" context.Article=this}}}
            {{/each}}


            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="element-options" class="content-subhead">Element Options</h2>
            <p>
                "Sub" Elements can also have their own datasources attached. While it is usually better to "fetch up front and pass down", sometimes you want an Element which controls and fetches its own data. Here we demonstrate an Element which will fetch an article based on Id, and we will use the <code>PageArticles</code> variable from the previous example to supply the list of Ids. Note that we are "wasting" effort here by refetching from the API, this is just meant as an example of using <code>options</code> to control Element behaviour.
            </p>

            <p>
                These are the files in use that demonstrate how this works:
                <ul>
                    <li>
                        This Element configuration file receives the <code>options</code> and passes <code>ArticleId</code> to the downstream datasource: {{{XprElement bundlePath="git_link" options.path="xpr/element_config/details/article_details_fetching.json"}}}
                    </li>
                    <li>
                        This datasource receives <code>options.ArticleId</code> and uses it to parameterize an API call: {{{XprElement bundlePath="git_link" options.path="xpr/datasource/details/article_by_id.json"}}}
                    </li>
                    <li>
                        Finally, this template renders the result of the datasource: {{{XprElement bundlePath="git_link" options.path="xpr/element/details/article_details_fetching.hbs"}}}
                    </li>
                </ul>
            </p>


            <p>
            {{=<% %>=}}
            <code>
            {{#each PageArticles}}
                {{{XprElement bundlePath="details/article_details_fetching" options.ArticleId=this.Id}}}
            {{/each}}
            </code>
            <%={{ }}=%>
            </p>
            {{#each PageArticles}}
            {{{XprElement bundlePath="details/article_details_fetching" options.ArticleId=this.Id}}}
            {{/each}}

            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="ssjs-binding" class="content-subhead">SSJS - Element Binding</h2>
            <p>
                Bundles 2.0 SSJS Bindings are a lot more flexible than they used to be. For starters, we're going to render an Element which has a datasource binding which has no datasource <code>path</code> and instead, uses the script block to do all data fetching exclusively in SSJS. 
            </p>
            {{=<% %>=}}
            <h4>Element Inclusion</h4>
            <code>
            {{{XprElement bundlePath="details/ssjs" options.message='Hello World!'}}}
            </code>
            <%={{ }}=%>
            <h4>Element Configuration</h4>
            {{{XprElement bundlePath="git_link" options.path="xpr/element_config/details/ssjs.json"}}}
            {{=<% %>=}}
            <code class="devon-small-code">
{
    "datasources": [
        {
            "__comment" : "Note that there is no 'path' specified for this datasource, in Bundles 2 there is no need to create 'null' adapters when only requiring a script binding",
            "name" : "script_output",
            "scripts" : [
                {
                    "_comment" : "Notice the preceeding / in the path which resolves to the script in /server_js/simple_echo. If the path was set to 'simple_echo' with no preceeding /, it would look for a 'neighbor file' which would be in /server_js/details/simple_echo",
                    "path" : "/simple_echo",
                    "options" : {
                        "message" : "{{options.message}}"
                    }
                }
            ]
        }
    ]
}
            </code>
            <%={{ }}=%>
            <h4>Script</h4>
            {{{XprElement bundlePath="git_link" options.path="xpr/server_js/simple_echo.js"}}}
            <code class="devon-small-code">
//this is a "simple echo" JS script to demonstrate binding scripts to Elements and datasources.

exports.process = function(context, options) {
    return options["message"];
}
            </code>
            <h4>Result</h4>
            {{{XprElement bundlePath="details/ssjs" options.message='Hello World!'}}}

            <!---------------------------------------->
            <!---------------------------------------->

            <h2 id="ssjs-binding-ds" class="content-subhead">SSJS - Datasources & Modules</h2>
            <p>
            Lorem Ipsum
            </p>
            <h2 id="bundle-routes" class="content-subhead">Bundle Routes</h2>
            <p>
                Bundle Routes are specified in the "routes.json" file at the root of the Bundle's <code>xpr</code> folder.
                {{{XprElement bundlePath="git_link" options.path="xpr/routes.json"}}}

                A route binds an endpoint (URL) and it's HTTP request verb to a script. and provides a formatter Element to render the result of the script.
    
                This demo shows an ajax GET route, running the same script but supplying different formatters: one for HTML and one for JSON.
                <ul>
                    <li>{{{XprElement bundlePath="git_link" options.path="xpr/server_js/ajax/script.js"}}}</li>
                    <li>{{{XprElement bundlePath="git_link" options.path="xpr/element/ajax/html_formatter.hbs"}}}</li>
                    <li>{{{XprElement bundlePath="git_link" options.path="xpr/element/ajax/json_formatter.hbs"}}}</li>
                </ul>


                <div>
                    <button id='test_html'>Test HTML Ajax</button>
                    <p>
                        Result:<span id="test_html_result"></span>
                    </p>
                    <button id='test_json'>Test JSON Ajax</button>
                    <p>
                        Result:<span id="test_json_result"></span>
                    </p>
                    <script>

                    $(document).ready( function() {
                        $("#test_html").click(function(){ 
                            $.get("/__xpr__/pub_engine/bundles-demo/routes/ajax_example_html", function(data){
                                $("#test_html_result").html(data);
                            });
                        });
                        $("#test_json").click(function(){ 
                            $.get("/__xpr__/pub_engine/bundles-demo/routes/ajax_example_json", function(data){
                                $("#test_json_result").html("<pre>"+data+"</pre>");
                            });
                        });
                    } );

                    //$("#test_json").onClick(function(){ $.get("/__xpr__/pub_engine/bundles-demo/routes/ajax_example_json", function(data){$("#test_json_result").html(data));});
                    //$("#test_html").onClick(function(){ $.get("/__xpr__/pub_engine/bundles-demo/routes/ajax_example_html", function(data){$("#test_html_result").html(data));});
                    </script>
                </div>
            </p>

            
        </div>
    </div>
</div>

<script src="/__xpr__/pub_engine/{{xpr.bundle}}/web/js/ui.js"></script>
</body>
</html>

